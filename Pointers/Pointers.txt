== Code 1 (Function call Dangling Pointer):
#include<iostream>
using namespace std;

int* fun(){
    //x is a local variables and goes out of scope after the execution of fun() is over.
    int x = 5;
    return &x;
}

int main(){
    int*p = fun();
    
    cout << *p << endl;
}


== Code 2 (Function call Dangling Pointer Solution):
#include<iostream>
using namespace std;

int* fun(){
    //x has scope throughout the program
    static int x = 5;
    return &x;
}

int main(){
    int*p = fun();
    
    cout << *p << endl;
}


== Code 3 (Dangling Pointer: Variable goes out of scope):
#include<iostream>
using namespace std;

int main(){
    int*p;
    {
        int ch = 50;
        p = &ch;
    }
    cout << *p << endl;	//Here p is a dangling pointer
}


== Code 4(Wild Pointer pointing to unknown memory location):
#include <iostream>
using namespace std;

int main()
{
    int* p;
    std::cout << *p << std::endl;

    *p = 12;    
    std::cout << *p << std::endl;
    
    return 0;
}


== Code 5(Avoiding Dangling Pointers):
#include <iostream>
using namespace std;

int main()
{
    int* p; //wild pointer
    int a = 10;
    p = &a; //'p' is not a wild pointer now, bcoz if a pointer points to a known variable then its not a wild pointer.
    *p = 12;    //This is fine. Value of a is changed.
    
    std::cout << *p << std::endl;
    
    return 0;
}


== Code 6(Another example showing dangling pointers):
#include <iostream>
using namespace std;

int main()
{
    int* arr;
    for(int i=0; i<5; i++){
        std::cout << arr[i] << std::endl;   //A pointer 'arr' is declared but not initialized. So, it is displaying some random memory locations
    }
    
    return 0;
}